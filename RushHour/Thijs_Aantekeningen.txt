

# file met allemaal verschillende algoritmes.
# radio russia repository
# madplotlib
# codebase belangirjk!!
# voor presentatie alleen kijken naar algoritmes 
# algoritmes als classes!
    

#lecture maandag week 3:
    # zet de algoritmes tegenover elkaar
        # veel resultaten!
    #(unit)tests
    # kloppen all tussenstappen? springt een auto over een auto heen?


# Reproducibility!!!!! Deze is belangrijk:
    # Deel de code
    # Deel de input
    # Documenteer hoe de code is ....?
    #
    #

#Tips:
# Schrijf scripts voor de experimenten
# Liever te veel data, dan te weinig
# Gebruik een "seed" bij random algoritmes.
# Schrijf scripts voor het visualiseren van resultaten
# requirements.txt!!!!!!!!!!!!!!! belangrijk voor matplotlib, Thijs gebruikt een oudere versie, dus anderen moeten testen of het werkt met hun versie.
# Schijf scripts!!!
    

# algoritmes vegelijken:
    # Tijd en ruimte

    # Tijd: dezelfde computer, rapporteer specs: Proceser, deel de code, gebruik geen profiler

    # median is belangrijker dan mean! Dus boxplot is wel handig denk ik

# from statistics import variance, stdev
    

# kijk uit met claims
# Buggy implementaties...?
# under promise, over deliver
# geef een oplossing voor de case
    
# one factor at a time
# grid search : paken twee parameters en .....
    

#constructieve algoritme maken
    

    #introductie:wij zijn ttj,oftewel tijmen, thijs, joost. Rushhour is een schuifpuzzel die in de jaren 70 bedacht is door Nobuyuki Yoshigahara.
    # case uitleggen 
    # statespase uitleggen: twee tot de macht n, waar n bordlengte keer bordlengte is
    # nooit een auto ervoor horizontaal, auto is altijd met XX en rood aangegeven
    #  uitleggen dat we in stappen van 1 en winst is dat de auto daar rechts staat